events {
    worker_connections 1024;
}
# load_module /usr/lib/nginx/modules/ngx_http_js_module.so;
http {

    # Map to determine if a request requires authentication
    # map $remote_addr $require_auth {
        
    #     # Internal network (no authentication required)
    #     ~^192\.168\.192\..* 0;

    #     # All other networks (authentication required)
    #     default 1;
    # }

    # upstream cart_service {
    #     server ${MICROSERVICE_CART_HOST}:${MICROSERVICE_CART_PORT} max_fails=3 fail_timeout=30s;
    #     server 127.0.0.1:12345 backup;
    # }
    
    server {
        listen 80;

        # proxy_intercept_errors on;
        # error_page 502 503 504 = @fallback;

        # Serve static files from the html directory
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        

        location /cart {

            # Apply authentication for requests from public networks
            auth_request /validate-token;

            # Extract the X-User-Roles header from the /validate-token response
            auth_request_set $user_roles $upstream_http_x_user_roles;
            
            # Handle authentication failure
            error_page 401 = @auth_fail;

            proxy_pass http://${MICROSERVICE_CART_HOST}:${MICROSERVICE_CART_PORT}/;
            # proxy_pass http://cart_service;

            # Handle upstream errors
            # proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            proxy_intercept_errors on;
            error_page 500 501 502 503 504 = @fallback;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Pass user roles as a custom header
            proxy_set_header X-User-Roles $user_roles;

            # Set a custom header to indicate the source of the request
            proxy_set_header X-Request-Source "public";

            # Optional timeout settings
            proxy_connect_timeout 15s;
            proxy_read_timeout 15s;            
        }

        # Internal network route bypassing authentication
        location /internal/cart/ {

            proxy_pass http://${MICROSERVICE_CART_HOST}:${MICROSERVICE_CART_PORT}/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Set a custom header to indicate the source of the request
            proxy_set_header X-Request-Source "internal";

            # Optional timeout settings
            proxy_connect_timeout 15s;
            proxy_read_timeout 15s;
        }

        location /products/ {
        
            # Apply authentication for requests from public networks
            auth_request /validate-token;

            # Extract the X-User-Roles header from the /validate-token response
            auth_request_set $user_roles $upstream_http_x_user_roles;
            
            # Handle authentication failure
            error_page 401 = @auth_fail;

            # proxy_pass http://${MICROSERVICE_PRODUCTS_HOST}:${MICROSERVICE_PRODUCTS_PORT}/$dynamic_path;
            proxy_pass http://${MICROSERVICE_PRODUCTS_HOST}:${MICROSERVICE_PRODUCTS_PORT}/;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Pass user roles as a custom header
            proxy_set_header X-User-Roles $user_roles;

            # Set a custom header to indicate the source of the request
            proxy_set_header X-Request-Source "public";

            # Optional timeout settings
            proxy_connect_timeout 15s;
            proxy_read_timeout 15s;
        }



        location /internal/products/ {

            proxy_pass http://${MICROSERVICE_PRODUCTS_HOST}:${MICROSERVICE_PRODUCTS_PORT}/;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Set a custom header to indicate the source of the request
            proxy_set_header X-Request-Source "internal";

            # Optional timeout settings
            proxy_connect_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Auth Route

        location = /auth/login {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/realms/${MICROSERVICE_AUTH_REALM}/protocol/openid-connect/token;

            # Add headers and configurations as needed
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /auth/logout {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/realms/${MICROSERVICE_AUTH_REALM}/protocol/openid-connect/logout;

            # Add headers and configurations as needed
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Keycloak Admin Route
        location /keycloak {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Route to validate JWT tokens
        location = /validate-token {
            internal;
            proxy_pass http://node-jwt-validator-service:3000/validate;
            proxy_pass_request_body off;
			proxy_set_header Content-Length "";
            proxy_set_header X-Original-Method $request_method;
			proxy_set_header X-Original-URI $request_uri;

        }

        # Custom error handling for unauthorized access
        location @auth_fail {
            return 401 'Unauthorized';
            add_header Content-Type text/plain;
        }

        location @fallback {
            add_header X-Debug-Status $status;
            return 502 'Service temporarily unavailable. Please try again later.';
        }



        
    }
}
