events {
    worker_connections 1024;
}
# load_module /usr/lib/nginx/modules/ngx_http_js_module.so;
http {
    
    server {
        listen 80;

        # Serve static files from the html directory
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /cart/ {

            # set $require_auth 1;

            # Allow internal requests (e.g., from cart-service)
            # if ($remote_addr ~* "192\.168\.192\..*") {
            #     set $require_auth 0;
            # }

            # Validate JWT for external requests
            # if ($require_auth = 1) {
            #     auth_request /validate-token;
            #     # try_files _ =204;
            # }

            # Apply auth_request unconditionally
            auth_request /validate-token; 
            auth_request_set $dynamic $upstream_http_x_route;
			proxy_set_header X-Route $dynamic;
            # auth_request_set $auth_status "";

            # Handle authentication failure
            # if ($auth_status != 200) {
            #     return 401; 
            # }

            return 404;

            proxy_pass http://${MICROSERVICE_CART_HOST}:${MICROSERVICE_CART_PORT}/;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Optional timeout settings
            proxy_connect_timeout 15s;
            proxy_read_timeout 15s;
        }

        # Auth Route

        location = /auth/login {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/realms/${MICROSERVICE_AUTH_REALM}/protocol/openid-connect/token;

            # Add headers and configurations as needed
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /auth/logout {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/realms/${MICROSERVICE_AUTH_REALM}/protocol/openid-connect/logout;

            # Add headers and configurations as needed
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Keycloak Admin Route
        location /keycloak {
            proxy_pass http://${MICROSERVICE_AUTH_HOST}:${MICROSERVICE_AUTH_PORT}/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        

         # Route to validate JWT tokens
        location = /validate-token {
            # internal;
            proxy_pass http://node-jwt-validator-service:3000/validate;
            proxy_pass_request_body off;
			proxy_set_header Content-Length "";
			proxy_set_header X-Original-URI $request_uri;

        }



        
    }
}
